{"ast":null,"code":"var _jsxFileName = \"H:\\\\Documents\\\\UNIVERSITY\\\\2021\\\\COMP3130\\\\majorAssignment\\\\app\\\\screens\\\\LoginScreen.js\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport DataManager from \"../config/DataManager\";\nimport AppButton from \"../components/AppButton\";\nimport AppTextInput from \"../components/AppTextInput\";\nimport AppScreen from \"../components/AppScreen\";\nimport AppText from \"../components/AppText\";\nimport colors from \"../config/color\";\n\nvar getUsers = function getUsers() {\n  var commonData = DataManager.getInstance();\n  return commonData.getUsers();\n};\n\nvar users = getUsers();\nvar validationSchema = Yup.object().shape({\n  email: Yup.string().required().email(),\n  password: Yup.string().required().min(4).max(8)\n});\n\nvar validateUser = function validateUser(_ref) {\n  var values = _ref.values;\n  return users.some(function (user) {\n    return user.email === values.email && user.password === values.password;\n  });\n};\n\nvar getUser = function getUser(email) {\n  return users.find(function (user) {\n    return user.email === email;\n  });\n};\n\nvar createUser = function createUser(email) {\n  var commonData = DataManager.getInstance();\n  var userID = getUser(email).id;\n  commonData.setUserID(userID);\n};\n\nfunction LoginScreen(_ref2) {\n  var _this = this;\n\n  var navigation = _ref2.navigation;\n  return React.createElement(AppScreen, {\n    style: styles.center,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, React.createElement(AppText, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"LOGIN\"), React.createElement(Formik, {\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    onSubmit: function onSubmit(values, _ref3) {\n      var resetForm = _ref3.resetForm;\n\n      if (validateUser({\n        values: values\n      })) {\n        resetForm();\n        createUser(values.email);\n        navigation.navigate(\"Home\");\n      } else alert('Login details are incorrect!');\n    },\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, function (_ref4) {\n    var handleChange = _ref4.handleChange,\n        handleSubmit = _ref4.handleSubmit,\n        errors = _ref4.errors;\n    return React.createElement(React.Fragment, null, React.createElement(AppTextInput, {\n      icon: \"email\",\n      placeholder: \"Email Address\",\n      keyboardType: \"email-address\",\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      onChangeText: handleChange('email'),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }), React.createElement(Text, {\n      style: styles.smallText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, errors.email), React.createElement(AppTextInput, {\n      icon: \"lock\",\n      placeholder: \"Password\",\n      secureTextEntry: true,\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      onChangeText: handleChange('password'),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }), React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, errors.password), React.createElement(AppButton, {\n      onPress: handleSubmit,\n      icon: \"check\",\n      title: \"Login\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }));\n  }));\n}\n\nvar styles = StyleSheet.create({\n  center: {\n    alignItems: 'center',\n    marginTop: 55\n  },\n  text: {\n    fontWeight: 'bold',\n    marginBottom: 20\n  },\n  smallText: {\n    color: colors.black\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["H:/Documents/UNIVERSITY/2021/COMP3130/majorAssignment/app/screens/LoginScreen.js"],"names":["React","Formik","Yup","DataManager","AppButton","AppTextInput","AppScreen","AppText","colors","getUsers","commonData","getInstance","users","validationSchema","object","shape","email","string","required","password","min","max","validateUser","values","some","user","getUser","find","createUser","userID","id","setUserID","LoginScreen","navigation","styles","center","text","resetForm","navigate","alert","handleChange","handleSubmit","errors","smallText","StyleSheet","create","alignItems","marginTop","fontWeight","marginBottom","color","black"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {StyleSheet, Text } from 'react-native';\r\nimport {Formik} from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport DataManager from '../config/DataManager';\r\n\r\nimport AppButton from '../components/AppButton';\r\nimport AppTextInput from '../components/AppTextInput';\r\nimport AppScreen from '../components/AppScreen';\r\nimport AppText from '../components/AppText';\r\n\r\nimport colors from '../config/color';\r\n\r\n\r\n\r\nconst getUsers = () => {\r\n    let commonData = DataManager.getInstance();\r\n    return commonData.getUsers()\r\n}\r\n\r\nconst users = getUsers()\r\n\r\nconst validationSchema = Yup.object().shape(\r\n    {\r\n        email: Yup.string().required().email(),\r\n        password: Yup.string().required().min(4).max(8)\r\n    }\r\n)\r\n\r\nconst validateUser = ({values}) => {\r\n    return(\r\n        users.some(user =>  user.email === values.email && user.password === values.password)\r\n    )\r\n}\r\n\r\nconst getUser = (email) => {\r\n    return users.find((user) => user.email === email)\r\n}\r\n\r\nconst createUser = (email) => {\r\n    let commonData = DataManager.getInstance();\r\n    let userID = getUser(email).id\r\n    commonData.setUserID(userID);\r\n}\r\n\r\n\r\nfunction LoginScreen({navigation}) { \r\n\r\n    return (\r\n        <AppScreen style={styles.center}>\r\n            <AppText style={styles.text}>LOGIN</AppText>\r\n            <Formik\r\n                initialValues={{email: '', password: ''}}\r\n                onSubmit = {(values, {resetForm}) =>  {\r\n                    if(validateUser({values})){\r\n                        resetForm();\r\n                        createUser(values.email)\r\n                        navigation.navigate(\"Home\") \r\n                    } else alert('Login details are incorrect!')\r\n                    \r\n                }}\r\n                validationSchema={validationSchema}\r\n                >\r\n            {({handleChange, handleSubmit, errors}) => (\r\n                <>\r\n                <AppTextInput \r\n                    icon=\"email\" \r\n                    placeholder=\"Email Address\" \r\n                    keyboardType=\"email-address\" \r\n                    autoCapitalize='none' \r\n                    autoCorrect={false}\r\n                    onChangeText = {handleChange('email')}/>\r\n                <Text style={styles.smallText}>{errors.email}</Text>\r\n                <AppTextInput \r\n                    icon=\"lock\" \r\n                    placeholder=\"Password\"\r\n                    secureTextEntry= {true} \r\n                    autoCapitalize='none' \r\n                    autoCorrect={false}\r\n                    onChangeText = {handleChange('password')}/>\r\n                <Text>{errors.password}</Text>\r\n                <AppButton \r\n                    onPress={handleSubmit} \r\n                    icon=\"check\" \r\n                    title=\"Login\"/>\r\n                </>  \r\n            )}                                                                                                                                                                                                                                \r\n            </Formik>\r\n        </AppScreen>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    center:{\r\n        alignItems: 'center',\r\n        marginTop: 55\r\n    },\r\n    text:{\r\n        fontWeight: 'bold',\r\n        marginBottom: 20\r\n    },\r\n    smallText: {\r\n        color: colors.black\r\n    }\r\n})\r\n\r\nexport default LoginScreen;"]},"metadata":{},"sourceType":"module"}